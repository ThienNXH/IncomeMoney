//Authorization model
model User {
  id            String          @id @default(uuid()) @db.Uuid
  email         String          @unique
  password      String
  firstname     String?
  lastname      String?
  roleId        String?         @db.Uuid
  role          Role?           @relation(fields: [roleId], references: [id])
  messages      MessageInput[]
  createdAt     DateTime        @default(now())
  createdBy     String?
  updatedAt     DateTime        @updatedAt
  updatedBy     String?
  deletedAt     DateTime?
  deletedBy     String?
  MessageOutput MessageOutput[]
  IncomeMoney   IncomeMoney[]
  SourceIncome  SourceIncome[]
  Prompt        Prompt[]
}

model Role {
  id             String           @id @default(uuid()) @db.Uuid
  name           String           @unique
  description    String?
  users          User[]
  createdAt      DateTime         @default(now())
  createdBy      String?
  updatedAt      DateTime         @updatedAt
  updatedBy      String?
  deletedAt      DateTime?
  deletedBy      String?
  RolePermission RolePermission[]
}

model Permission {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @unique
  description        String?
  createdAt          DateTime             @default(now())
  createdBy          String?
  updatedAt          DateTime             @updatedAt
  updatedBy          String?
  deletedAt          DateTime?
  deletedBy          String?
  RolePermission     RolePermission[]
  PermissionFunction PermissionFunction[]
}

model Function {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @unique
  customName         String?
  description        String?
  link               String?
  status             Status               @default(ACTIVE)
  parentId           String?              @db.Uuid
  parent             Function?            @relation("ParentFunction", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Function[]           @relation("ParentFunction")
  createdAt          DateTime             @default(now())
  createdBy          String?
  updatedAt          DateTime             @updatedAt
  updatedBy          String?
  deletedAt          DateTime?
  deletedBy          String?
  PermissionFunction PermissionFunction[]
}

//many to many Role & Permission
model RolePermission {
  roleId       String     @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}

//many to many Permission & Function
model PermissionFunction {
  permissionId String     @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  functionId   String     @db.Uuid
  function     Function   @relation(fields: [functionId], references: [id])

  @@id([permissionId, functionId])
}
